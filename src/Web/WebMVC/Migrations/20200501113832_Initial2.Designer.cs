// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Subscribing.Infrastructure;

namespace WebMVC.Migrations
{
    [DbContext(typeof(SubscriberContext))]
    [Migration("20200501113832_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Subscribing.Domain.ApplicationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationEventName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("NotificationTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationEvent");
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventChannel", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DelayedSendMinutes")
                        .HasColumnName("DelayedSendMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireAcknowledgement")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "ApplicationEventId");

                    b.HasIndex("ApplicationEventId");

                    b.ToTable("ApplicationEventChannel");
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventChannelTemplate", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Encoding")
                        .IsRequired()
                        .HasColumnName("Encoding")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnName("Format")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ChannelId", "ApplicationEventId");

                    b.HasIndex("ApplicationEventId");

                    b.ToTable("ApplicationEventChannelTemplate");
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationEventParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnName("ParameterName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationEventId");

                    b.ToTable("ApplicationEventParameter");
                });

            modelBuilder.Entity("Subscribing.Domain.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnName("ChannelName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("Subscribing.Domain.MailBoxItem", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientPartyId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Body")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("DirectEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("Excluded")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireAcknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("SenderPartyIds")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(100)");

                    b.HasKey("MessageId", "RecipientPartyId");

                    b.HasIndex("RecipientPartyId");

                    b.ToTable("MailBoxItem");
                });

            modelBuilder.Entity("Subscribing.Domain.Subscriber", b =>
                {
                    b.Property<string>("SubscriberPartyId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("SubscriberPartyId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberApplicationEvent", b =>
                {
                    b.Property<string>("SubscriberPartyId")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriberPartyId", "ApplicationEventId");

                    b.HasIndex("ApplicationEventId");

                    b.HasIndex("ChannelId");

                    b.ToTable("SubscriberApplicationEvent");
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubscriberFilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilterType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FilterValue")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationEventId");

                    b.ToTable("SubscriberFilter");
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("SubscriberGroupId")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SubscriberGroup");
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberGroupSubscriber", b =>
                {
                    b.Property<string>("SubscriberPartyId")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SubscriberGroupId")
                        .HasColumnType("int");

                    b.HasKey("SubscriberPartyId", "SubscriberGroupId");

                    b.HasIndex("SubscriberGroupId");

                    b.ToTable("SubscriberGroupSubscriber");
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventChannel", b =>
                {
                    b.HasOne("Subscribing.Domain.ApplicationEvent", "ApplicationEvent")
                        .WithMany("ApplicationEventChannels")
                        .HasForeignKey("ApplicationEventId")
                        .IsRequired();

                    b.HasOne("Subscribing.Domain.Channel", "Channel")
                        .WithMany("ApplicationEventChannels")
                        .HasForeignKey("ChannelId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventChannelTemplate", b =>
                {
                    b.HasOne("Subscribing.Domain.ApplicationEvent", "ApplicationEvent")
                        .WithMany("ApplicationEventChannelTemplates")
                        .HasForeignKey("ApplicationEventId")
                        .IsRequired();

                    b.HasOne("Subscribing.Domain.Channel", "Channel")
                        .WithMany("ApplicationEventChannelTemplates")
                        .HasForeignKey("ChannelId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.ApplicationEventParameter", b =>
                {
                    b.HasOne("Subscribing.Domain.ApplicationEvent", "ApplicationEvent")
                        .WithMany("ApplicationEventParameters")
                        .HasForeignKey("ApplicationEventId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.MailBoxItem", b =>
                {
                    b.HasOne("Subscribing.Domain.Subscriber", "Recipient")
                        .WithMany("RecipientMailBoxItems")
                        .HasForeignKey("RecipientPartyId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberApplicationEvent", b =>
                {
                    b.HasOne("Subscribing.Domain.ApplicationEvent", "ApplicationEvent")
                        .WithMany("SubscriberApplicationEvents")
                        .HasForeignKey("ApplicationEventId")
                        .IsRequired();

                    b.HasOne("Subscribing.Domain.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .IsRequired();

                    b.HasOne("Subscribing.Domain.Subscriber", "Subscriber")
                        .WithMany("SubscriberApplicationEvents")
                        .HasForeignKey("SubscriberPartyId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberFilter", b =>
                {
                    b.HasOne("Subscribing.Domain.ApplicationEvent", "ApplicationEvent")
                        .WithMany("SubscriberFilters")
                        .HasForeignKey("ApplicationEventId")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribing.Domain.SubscriberGroupSubscriber", b =>
                {
                    b.HasOne("Subscribing.Domain.SubscriberGroup", "SubscriberGroup")
                        .WithMany()
                        .HasForeignKey("SubscriberGroupId")
                        .IsRequired();

                    b.HasOne("Subscribing.Domain.Subscriber", "Subscriber")
                        .WithMany("SubscriberGroupSubscriber")
                        .HasForeignKey("SubscriberPartyId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
